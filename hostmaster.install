<?php

/**
 * Implement hook_install().
 *
 * Perform actions to set up the site for this profile.
 */
function hostmaster_install() {

  variable_set('install_profile', 'hostmaster');

// add support for nginx
  if (d()->platform->server->http_service_type === 'nginx') {
    drupal_install_modules(array('hosting_nginx'));
  }

  // Bootstrap and create all the initial nodes
  hostmaster_bootstrap();

  // Finalize and setup themes, menus, optional modules etc
  hostmaster_task_finalize();

}

function hostmaster_bootstrap() {
  /* Default node types and default node */
  $types =  node_types_rebuild();

  // Initialize the hosting defines
  hosting_init();

  /* Default client */
  $node = new stdClass();
  $node->uid = 1;
  $node->type = 'client';
  $node->title = drush_get_option('client_name', 'admin');
  $node->status = 1;
  node_save($node);
  variable_set('hosting_default_client', $node->nid);
  variable_set('hosting_admin_client', $node->nid);

  $client_id = $node->nid;

  /* Default server */
  $node = new stdClass();
  $node->uid = 1;
  $node->type = 'server';
  $node->title = php_uname('n');
  $node->status = 1;
  $node->hosting_name = 'server_master';
  $node->services = array();

  /* Make it compatible with more than apache and nginx */
  $master_server = d()->platform->server;
  hosting_services_add($node, 'http', $master_server->http_service_type, array(
   'restart_cmd' => $master_server->http_restart_cmd,
   'port' => 80,
   'available' => 1,
  ));

  /* examine the db server associated with the hostmaster site */
  $db_server = d()->db_server;
  $master_db = parse_url($db_server->master_db);
  /* if it's not the same server as the master server, create a new node
   * for it */
  if ($db_server->remote_host == $master_server->remote_host) {
    $db_node = $node;
  } else {
    $db_node = new stdClass();
    $db_node->uid = 1;
    $db_node->type = 'server';
    $db_node->title = $master_db['host'];
    $db_node->status = 1;
    $db_node->hosting_name = 'server_' . $db_server->remote_host;
    $db_node->services = array();
  }
  hosting_services_add($db_node, 'db', $db_server->db_service_type, array(
    'db_type' => $master_db['scheme'],
    'db_user' => urldecode($master_db['user']),
    'db_passwd' => isset($master_db['pass']) ? urldecode($master_db['pass']) : '',
    'port' => 3306,
    'available' => 1,
  ));

  drupal_set_message(st('Creating master server node'));
  node_save($node);
  if ($db_server->remote_host != $master_server->remote_host) {
    drupal_set_message(st('Creating db server node'));
    node_save($db_node);
  }
  variable_set('hosting_default_web_server', $node->nid);
  variable_set('hosting_own_web_server', $node->nid);

  variable_set('hosting_default_db_server', $db_node->nid);
  variable_set('hosting_own_db_server', $db_node->nid);

  // Create the hostmaster platform & packages
  $node = new stdClass();
  $node->uid = 1;
  $node->title = 'Drupal';
  $node->type = 'package';
  $node->package_type = 'platform';
  $node->short_name = 'drupal';
  $node->old_short_name = 'drupal';
  $node->description = 'Drupal code-base.';
  $node->status = 1;
  node_save($node);
  $package_id = $node->nid;

  $node = new stdClass();
  $node->uid = 1;
  $node->type = 'platform';
  $node->title = 'hostmaster';
  $node->publish_path = d()->root;
  $node->makefile = '';
  $node->verified = 1;
  $node->web_server = variable_get('hosting_default_web_server', 2);
  $node->platform_status = 1;
  $node->status = 1;
  $node->make_working_copy = 0;
  node_save($node);
  $platform_id = $node->nid;
  variable_set('hosting_own_platform', $node->nid);

  $instance = new stdClass();
  $instance->rid = $node->nid;
  $instance->version = VERSION;
  $instance->filename = '';
  $instance->version_code = 1;
  //$instance->schema_version = drupal_get_installed_schema_version('system');
  $instance->schema_version = 0;
  $instance->package_id = $package_id;
  $instance->status = 0;
  hosting_package_instance_save($instance);

  // Create the hostmaster profile node
  $node = new stdClass();
  $node->uid = 1;
  $node->title = 'hostmaster';
  $node->type = 'package';
  $node->old_short_name = 'hostmaster';
  $node->description = 'The Hostmaster profile.';
  $node->package_type = 'profile';
  $node->short_name = 'hostmaster';
  $node->status = 1;
  node_save($node);

  $profile_id = $node->nid;

  // Create the main Aegir site node
  $node = new stdClass();
  $node->uid = 1;
  $node->type = 'site';
  $node->title = d()->uri;
  $node->platform = $platform_id;
  $node->client = $client_id;
  $node->db_name = '';
  $node->db_server = $db_node->nid;
  $node->profile = $profile_id;
  $node->import = true;
  $node->hosting_name = 'hostmaster';
  $node->site_status = 1;
  $node->verified = 1;
  $node->status = 1;
  node_save($node);

  variable_set('site_frontpage', 'hosting/sites');

  // do not allow user registration: the signup form will do that
  variable_set('user_register', 0);

  // This is saved because the config generation script is running via drush, and does not have access to this value
  variable_set('install_url' , $GLOBALS['base_url']);
}

function hostmaster_task_finalize() {
  variable_set('install_profile', 'hostmaster');

  // Create some main menu links.
  drupal_set_message(st('Configuring menu items'));
  $menu_paths = array(
    'Servers' => 'hosting/servers',
  );
  foreach ($menu_paths as $title => $menu_path) {
    $item = $existing_item = menu_get_item($menu_path);
    $item['menu_name'] = 'main-menu';
    $item['link_title'] = $title;
    $item['link_path'] = drupal_get_normal_path($menu_path);
    menu_link_save($item, $existing_item);
  }

  // Enable Eldir, and set is as default theme
  theme_enable(array('eldir'));
  variable_set('theme_default', 'eldir');

  // Disable the default Bartik theme
  theme_disable(array('bartik'));

  drupal_set_message(st('Configuring default blocks'));
  hostmaster_place_blocks('eldir');

  drupal_set_message(st('Configuring roles'));
  hostmaster_create_roles();

}

/**
 * Helper function to place block.
 */
function hostmaster_place_blocks($theme) {
  $blocks = array(
    array(
      'module' => 'hosting',
      'delta' => 'hosting_queues',
      'theme' => $theme,
      'status' => 1,
      'weight' => -1,
      'region' => 'sidebar_first',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'user',
      'delta' => '0',
      'theme' => $theme,
      'status' => 1,
      'weight' => -1,
      'region' => 'sidebar_first',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'user',
      'delta' => '1',
      'theme' => $theme,
      'status' => 1,
      'weight' => -1,
      'region' => 'sidebar_first',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'views',
      'delta' => 'hosting_task_list-block',
      'theme' => $theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'sidebar_first',
      'pages' => '',
      'cache' => -1,
    ),
    // TODO: Set visibility in Views on Drupal 7
    array(
      'module' => 'views',
      'delta' => 'hosting_site_list-block_1',
      'theme' => $theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'content_bottom',
      'pages' => 'hosting/c/platform_*',
      'cache' => -1,
    ),
    array(
      'module' => 'views',
      'delta' => 'hosting_site_list-block_profile',
      'theme' => $theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'content_bottom',
      'pages' => '',
      //"<?php\n\$node = menu_get_object();\nif (!empty(\$node)) {\n  return \$node->package_type == 'profile';\n}\n
      'cache' => -1,
    ),
    array(
      'module' => 'views',
      'delta' => 'hosting_site_list-block_client',
      'theme' => $theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'content_bottom',
      'pages' => '',
      //"<?php\n\$node = menu_get_object();\n\$menu_item = menu_get_item();\nif (!empty(\$node) && \$menu_item['number_parts'] == 2) {\n  return \$node->type == 'client';\n}\n
      'cache' => -1,
    ),
    array(
      'module' => 'views',
      'delta' => 'hosting_site_list-block_client2',
      'theme' => $theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'content_bottom',
      'pages' => '',
      //"<?php\nglobal \$user;\$node = menu_get_object();\n\$menu_item = menu_get_item();\nif (!empty(\$node)) && \$menu_item['number_parts'] == 2) {\n  return \$node->type == 'client' && $user->uid != 1;\n}\n
      'cache' => -1,
    ),
    array(
      'module' => 'views',
      'delta' => 'hosting_package_list-block_1',
      'theme' => $theme,
      'status' => 1,
      'weight' => -1,
      'region' => 'content_bottom',
      'pages' => '',
      //"<?php\n\$node = menu_get_object();\nif (!empty(\$node)) {\n  return \$node->type == 'package' && \$node->package_type != 'profile';\n}\n
      'cache' => -1,
    ),
  );

  $query = db_insert('block')->fields(array('module', 'delta', 'theme', 'status', 'weight', 'region', 'pages', 'cache'));
  foreach ($blocks as $block) {
    $query->values($block);
  }
  $query->execute();

}


/**
 * Helper function to create our roles
 */
function hostmaster_create_roles() {

  // Only allow access to our splash pages for anyone without a specific role
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('access disabled sites'));
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('access disabled sites'));

  // Create a default role for site administrators, with all available permissions assigned.
  $admin_role = new stdClass();
  $admin_role->name = 'administrator';
  $admin_role->weight = 2;
  user_role_save($admin_role);
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));
  // Set this as the administrator role.
  variable_set('user_admin_role', $admin_role->rid);

  // Assign user 1 the "administrator" role.
  db_insert('users_roles')
    ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
    ->execute();

  // Create a default role for Aegir administrators.
  $aegir_admin_role = new stdClass();
  $aegir_admin_role->name = 'aegir administrator';
  $aegir_admin_role->weight = 2;
  user_role_save($aegir_admin_role);
  $aegir_admin_perms = array(
    'access administration menu',
    'access content',
    'view revisions',
    'access user profiles',
  );

  // List all modules
  $modules = system_rebuild_module_data();
  foreach ($modules as $filename => $module) {
    // We only care about visible Aegir modules.
    if ($module->info['package'] != 'Hosting' || !empty($module->info['hidden'])) {
      continue;
    }
    // Gather all declared permissions.
    if (function_exists($module . '_permission')) {
      array_merge($aegir_admin_perms, call_user_func($module . '_permission'));
    }
    // Add permissions generated by actions_permissions for our VBO tasks.
    if (function_exists($module . '_node_operations')) {
      $ops = call_user_func($module . '_node_operations');
      foreach ($ops as $op) {
        $aegir_admin_perms[] = 'execute ' . $op['label'] . ' (' . $op['callback'] . ')';
      }
    }
  }
  user_role_grant_permissions($aegir_admin_role->rid, $aegir_admin_perms);

  // Create a default role for Aegir clients.
  $client_role = new stdClass();
  $client_role->name = 'aegir client';
  $client_role->weight = 2;
  user_role_save($client_role);
  // @todo we may need to have a hook here to consider plugins
  user_role_grant_permissions($client_role->rid, array(
    // Drupal core
    'access content',
    'view revisions',
    // Clients
    'edit own client',
    'view client',
    // Sites
    'create site',
    'delete site',
    'view site',
    'edit site',
    // Platforms
    'view platform',
    // Tasks
    'create backup task',
    'create delete task',
    'create disable task',
    'create enable task',
    'create restore task',
    'create verify task',
    'create clone task',
    'create migrate task',
    'access task logs',
    'view own tasks',
    'view task',
    'cancel own tasks',
    // Packages
    'view package',
    // Quotas
    'view own quota',
    // Aliases
    'create site aliases',
    // SSL
    'create ssl certificate',
    // VBO operations
    'execute Site: Backup (hosting_site_op_backup)',
    'execute Site: Delete (hosting_site_op_delete)',
    'execute Site: Disable (hosting_site_op_disable)',
    'execute Site: Enable (hosting_site_op_enable)',
    'execute Site: Reset password (hosting_site_op_login_reset)',
    'execute Site: Verify (hosting_site_op_verify)',
  ));

  // Create a default role for Aegir account managers.
  $acct_mgr_role = new stdClass();
  $acct_mgr_role->name = 'aegir account manager';
  $acct_mgr_role->weight = 2;
  user_role_save($acct_mgr_role);
  user_role_grant_permissions($acct_mgr_role->rid, array(
    // Drupal core
    'access content',
    'access user profiles',
    // Clients
    'administer clients',
    'create client',
    'edit client users',
    'view client',
    'edit client uname',
    // Quotas
    'edit all quotas',
    'view all quotas',
    'view own quota',
    // Sites
    'view_site',
  ));

  // Create a default role for Aegir platform managers.
  $plat_mgr_role = new stdClass();
  $plat_mgr_role->name = 'aegir platform manager';
  $plat_mgr_role->weight = 2;
  user_role_save($plat_mgr_role);
  user_role_grant_permissions($plat_mgr_role->rid, array(
    // Drupal core
    'access content',
    'search content',
    'use advanced search',
    'view revisions',
    // Tasks
    'administer tasks',
    'create clone task',
    'create migrate task',
    'create lock task',
    'create unlock task',
    'create verify task',
    'access task logs',
    'cancel own tasks',
    'view own tasks',
    'retry failed tasks',
    'view task',
    // Platforms
    'administer platforms',
    'create platform',
    'delete platform',
    'edit platform',
    'view locked platforms',
    'view platform',
    'create sites on locked platforms',
    // Sites
    'administer sites',
    'create site',
    'delete site',
    'edit site',
    'view site',
    // Packages
    'view package',
    // Clients
    'administer clients',
    // VBO operations
    'execute Site: Delete (hosting_site_op_delete)',
    'execute Site: Disable (hosting_site_op_disable)',
    'execute Site: Enable (hosting_site_op_enable)',
    'execute Site: Verify (hosting_site_op_verify)',
    'execute Platform: Delete (hosting_platform_op_delete)',
    'execute Platform: Lock (hosting_platform_op_lock)',
    'execute Platform: Unlock (hosting_platform_op_unlock)',
    'execute Platform: Verify (hosting_platform_op_verify)',
  ));

  node_access_rebuild();
}

