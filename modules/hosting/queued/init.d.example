#!/bin/sh
### BEGIN INIT INFO
# Provides:          hosting-queued
# Required-Start:    $network $local_fs
# Required-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Queue runner daemon for Aegir
# Description:       This module allows the Hosting tasks queue for the
#                    Aegir project to be 'daemonized' so that tasks
#                    are run as soon as possible instead of waiting
#                    for a cron run. This makes Aegir appear much more
#                    responsive.
### END INIT INFO

# Author: Antoine Beaupr√© <anarcat@koumbit.org>

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Aegir queue daemon"  # Introduce a short description here
NAME="hosting-queued" # Introduce the short server's name here
DAEMON=/usr/local/bin/drush      # Introduce the server's location here
DAEMON_ARGS="@hostmaster $NAME" # Arguments to run the daemon with
USER="aegir"
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
NICE=10

# Exit if the package is not installed
[ -x $DAEMON ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Define LSB functions.
# XXX: unfortunately not supported by all platforms so we ignore this
# for now, see http://fedoraproject.org/wiki/FCNewInit/Initscripts#Init_Script_Functions
#. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
        su - $USER $DAEMON $DAEMON_ARGS &
        ret=$?
        echo $! > $PIDFILE
        return $ret
}

#
# Function that stops the daemon/service
#
do_stop()
{
        if [ -e $PIDFILE ]; then
                kill `cat $PIDFILE`
                ret=$?
                rm -f $PIDFILE
        else
                ret=1
                echo "no pid file found"
        fi
        return $ret
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	kill -HUP `cat $PIDFILE`
}

case "$1" in
  start)
    [ "$VERBOSE" != no ] && echo "Starting $DESC " "$NAME"
    do_start
    case "$?" in
                0|1) [ "$VERBOSE" != no ] && echo "ok" ;;
                2) [ "$VERBOSE" != no ] && echo "FAIL" ;;
        esac
  ;;
  stop)
        [ "$VERBOSE" != no ] && echo "Stopping $DESC" "$NAME"
        do_stop
        case "$?" in
                0|1) [ "$VERBOSE" != no ] && echo ok ;;
                2) [ "$VERBOSE" != no ] && echo FAIL ;;
        esac
        ;;
  status)
        if ps `cat $PIDFILE`; then
            echo $DESC is running
            exit 0
       else
            ret=$?
            echo "$DESC is not running"
            exit $ret
       ;;
  reload|force-reload)
	echo "Reloading $DESC"
	do_reload
	;;
  restart)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	echo "Restarting $DESC"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|reload|force-reload}" >&2
	exit 3
	;;
esac

:
