<?php
// $Id$


/**
 * Implementation of hook_schema().
 */
function hosting_server_schema() {
  $schema['hosting_server'] = array(
    'fields' => array(
      'vid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),


    ),
    'primary key' => array('vid'),
  );

  $schema['hosting_ip_addresses'] = array(
   'fields' => array(
      'id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'ip_address' => array(
        'type' => 'text',
        'size' => 'small',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('id'),
    'indexes' => array(
      'vid' => array('vid'),
      'ip_address' => array('ip_address'),
    ),

  );

  $schema['hosting_service'] = array(
    'fields' => array(
      'vid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'service' => array(
        'type' => 'text',
        'size' => 'small',
        'not null' => TRUE,
      ),
      'type' => array(
        'type' => 'text',
        'size' => 'small',
        'not null' => TRUE,
      ),
      'restart_cmd' => array(
        'type' => 'text',
        'size' => 'big',
        'not null' => FALSE,
      ),
      'port' => array(
        'type' => 'int',
        'default' => 0,
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'available' => array(
        'type' => 'int',
        'size' => 'small', 
        'not null' => TRUE,
        'default' => 1,
      ),
    ),
    'indexes' => array(
      'vid' => array('vid'),
    ),
  );

  return $schema;
}

function hosting_server_install() {
  // Create tables.
  drupal_install_schema('hosting_server');
}

function hosting_server_uninstall() {
  drupal_uninstall_schema('hosting_server');
}

function hosting_server_update_6000() {
  $return = array();

  db_add_index($return, 'hosting_service', 'vid', array('vid'));

  return $return;
}


/**
 * Drop the drush_path and backup_path columns which are no longer needed.
 */
function hosting_server_update_6001() {
  $ret = array();

  db_drop_field($ret, "hosting_server", "drush_path");
  db_drop_field($ret, "hosting_server", "backup_path");
  return $ret;
}


/**
 * Drop the script_user and config_path columns which are no longer needed.
 * Also remove hosting_service entries which are no longer relevant.
 */
function hosting_server_update_6002() {
  $ret = array();
  db_query("DELETE FROM {hosting_service} WHERE service='server'");
  db_drop_field($ret, "hosting_server", "script_user");
  db_drop_field($ret, "hosting_server", "config_path");
  return $ret;
}


/**
 * Bring the port and restart command from hosting_web_server into hosting_service.
 */
function hosting_server_update_6003() {
  db_add_field($ret, 'hosting_service', 'port', array(
    'type' => 'int',
    'default' => 0,
    'unsigned' => TRUE,
    'not null' => FALSE
  ));

  db_add_field($ret, 'hosting_service', 'restart_cmd',array(
    'type' => 'text',
    'size' => 'big',
    'not null' => FALSE,
  ));

  return $ret;
}

/**
 * Add the IP address table.
 */
function hosting_server_update_6004() {

  $return = array();
  // create the table so we can rename it. 
  // retarded, i know.
  $schema = array(
   'fields' => array(
      'vid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'ip_address' => array(
        'type' => 'text',
        'size' => 'small',
        'not null' => TRUE,
      ),
    ),
    'indexes' => array(
      'vid' => array('vid'),
    ));
  db_create_table($return, 'hosting_server_ip', $schema);

  return $return;
}

/**
 * Rename the IP address table so that sites can also use it.
 */
function hosting_server_update_6005() {
  $ret = array();
  db_rename_table($ret, 'hosting_server_ip', 'hosting_ip_addresses');
  return $ret;
}

/**
 * Add primary key for IPs, drop versionning
 */
function hosting_server_update_6200() {
  $ret = array();
  db_add_field($ret, "hosting_ip_addresses", "id", array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0));
  db_drop_field($ret, "hosting_ip_addresses", "vid");
  $r = db_query("SELECT nid, ip_address FROM {hosting_ip_addresses}");
  for ($i = 0; $row = db_fetch_object($r); $i++) {
    $ret[] = update_sql("UPDATE {hosting_ip_addresses} SET id=$i WHERE nid={$row->nid} AND ip_address='{$row->ip_address}'");
  }
  db_add_primary_key($ret, 'hosting_ip_addresses', array('id'));
  return $ret;
}

/**
 * Create SSL cert to IP mapping table.
 *
 * We create the SSL cert to IP mapping table here instead of in the ssl
 * module as we need to cleanup the ip_address table after and we can't sync
 * across modules. Since this module is a dependency of hosting_site_ssl, this
 * is not a problem.
 */
function hosting_server_update_6201() {
  $ret = array();
  $schema = array(
    'fields' => array(
      // cert id
      'cid' => array( 
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      // reference to the hosting_ip_addresses table
      'ip_address' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'cid' => array('cid'),
      'ip_address' => array('ip_address'),
    ));
  db_create_table($ret, 'hosting_ssl_cert_ips', $schema);
  return $ret;
}

/**
 * Migrate site-specific IPs to server-specific IPs.
 *
 * This is the meat of the migration path.
 */
function hosting_server_update_6202() {
  $ret = array();
  /* now we need to insert a IP/ssl cert mapping in here
     here's a request that gives a list of IP/site/key mapping:

SELECT n.nid,ip_address, site.status, title, ssl_enabled, cid, c.ssl_key 
       FROM hosting_ssl_site s
       INNER JOIN hosting_ssl_cert c ON c.cid = s.ssl_key 
       INNER JOIN node n ON n.nid = s.nid
       INNER JOIN hosting_ip_addresses ip ON ip.nid = n.nid
       INNER JOIN hosting_site site ON site.nid = n.nid
       WHERE site.status > 0
       ORDER BY c.cid, n.nid;

SELECT ip_address, cid, c.ssl_key FROM hosting_ssl_site s INNER JOIN hosting_ssl_cert c ON c.cid = s.ssl_key INNER JOIN hosting_ip_addresses ip ON ip.nid = s.nid INNER JOIN hosting_site site ON site.nid = s.nid WHERE site.status > 0 GROUP BY cid ORDER BY c.cid, s.nid;

  */

  // XXX: this is broken, as it inserts the site-specific IP instead of the
  // server-level IP. that IP gets removed in the next update, so this fucks
  // up.
  $ret[] = update_sql("INSERT INTO {hosting_ssl_cert_ips} (cid, ip_address) 
  SELECT cid, ip.id FROM {hosting_ssl_site} s 
    INNER JOIN {hosting_ssl_cert} c ON c.cid = s.ssl_key
    INNER JOIN {hosting_ip_addresses} ip ON ip.nid = s.nid
    INNER JOIN {hosting_site} site ON site.nid = s.nid
    INNER JOIN {hosting_platform} p ON p.nid = site.platform
    WHERE ssl_enabled > %d AND site.status > %d
    GROUP BY cid ORDER BY c.cid, s.nid",
                HOSTING_SSL_DISABLED, HOSTING_SITE_DELETED);
  return $ret;
}

/**
 * Cleanup site-specific IP mappings.
 *
 * Those are now associated to certificates.
 */
function hosting_server_update_6202() {
  $ret = array();
  $ret[] = update_sql("DELETE {hosting_ip_addresses} FROM {hosting_ip_addresses} JOIN {node} ON hosting_ip_addresses.nid = node.nid WHERE node.type <> 'server';");
  return $ret;
}